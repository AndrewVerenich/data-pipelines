version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  kafka-ui:
    image: redpandadata/console:latest
    ports: [ "8080:8080" ]
    environment:
      - KAFKA_BROKERS=kafka:9092

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: iot_db
    command: postgres -c wal_level=logical
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  debezium:
    image: debezium/connect:2.5
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /kafka/connect,/debezium-connector
    volumes:
      - ./debezium-plugins:/debezium-connector

  debezium-init:
    image: curlimages/curl:8.5.0
    depends_on:
      - debezium
    volumes:
      - ./init-debezium.sh:/init-debezium.sh
    entrypoint: ["sh", "/init-debezium.sh"]

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: admin123
      CLICKHOUSE_DB: default

  wait-for-kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        for i in {1..30}; do
          if kafka-topics --bootstrap-server kafka:9092 --list | grep -q iot.public.sensor_data; then
            echo 'Topic is ready!'
            exit 0
          fi
          echo 'Waiting for topic... attempt $i'
          sleep 2
        done
        echo 'Timeout waiting for topic'
        exit 1
      "

  kafka-streams-app:
    build:
      context: ./kafka-streams-app
    depends_on:
      kafka:
        condition: service_healthy
      wait-for-kafka:
        condition: service_completed_successfully
    environment:
      - SPRING_KAFKA_STREAMS_BOOTSTRAP_SERVERS=kafka:9092
    restart: on-failure

  iot-data-generator:
    build:
      context: ./iot-data-generator
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/iot_db
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin123
    restart: on-failure

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - "3000:3000"
    depends_on:
      - clickhouse
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/plugins:/var/lib/grafana/plugins
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-clickhouse-datasource
    restart: on-failure

volumes:
  pgdata:
  clickhouse-data:
  grafana-storage:
